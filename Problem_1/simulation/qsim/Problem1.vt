// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/07/2020 11:58:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Problem1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Problem1_vlg_sample_tst(
	A,
	B,
	Clock,
	data_in,
	Enable_decode,
	FSM_reset,
	Reset_A,
	Reset_B,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  Clock;
input  data_in;
input  Enable_decode;
input  FSM_reset;
input  Reset_A;
input  Reset_B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or Clock or data_in or Enable_decode or FSM_reset or Reset_A or Reset_B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Problem1_vlg_check_tst (
	R_FIrst_Four,
	R_Last_Four,
	SIgn,
	Student_ID,
	sampler_rx
);
input [0:6] R_FIrst_Four;
input [0:6] R_Last_Four;
input [0:6] SIgn;
input [0:6] Student_ID;
input sampler_rx;

reg [0:6] R_FIrst_Four_expected;
reg [0:6] R_Last_Four_expected;
reg [0:6] SIgn_expected;
reg [0:6] Student_ID_expected;

reg [0:6] R_FIrst_Four_prev;
reg [0:6] R_Last_Four_prev;
reg [0:6] SIgn_prev;
reg [0:6] Student_ID_prev;

reg [0:6] R_FIrst_Four_expected_prev;
reg [0:6] R_Last_Four_expected_prev;
reg [0:6] SIgn_expected_prev;
reg [0:6] Student_ID_expected_prev;

reg [0:6] last_R_FIrst_Four_exp;
reg [0:6] last_R_Last_Four_exp;
reg [0:6] last_SIgn_exp;
reg [0:6] last_Student_ID_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	R_FIrst_Four_prev = R_FIrst_Four;
	R_Last_Four_prev = R_Last_Four;
	SIgn_prev = SIgn;
	Student_ID_prev = Student_ID;
end

// update expected /o prevs

always @(trigger)
begin
	R_FIrst_Four_expected_prev = R_FIrst_Four_expected;
	R_Last_Four_expected_prev = R_Last_Four_expected;
	SIgn_expected_prev = SIgn_expected;
	Student_ID_expected_prev = Student_ID_expected;
end


// expected R_Last_Four[ 6 ]
initial
begin
	R_Last_Four_expected[6] = 1'bX;
end 
// expected R_Last_Four[ 5 ]
initial
begin
	R_Last_Four_expected[5] = 1'bX;
end 
// expected R_Last_Four[ 4 ]
initial
begin
	R_Last_Four_expected[4] = 1'bX;
end 
// expected R_Last_Four[ 3 ]
initial
begin
	R_Last_Four_expected[3] = 1'bX;
end 
// expected R_Last_Four[ 2 ]
initial
begin
	R_Last_Four_expected[2] = 1'bX;
end 
// expected R_Last_Four[ 1 ]
initial
begin
	R_Last_Four_expected[1] = 1'bX;
end 
// expected R_Last_Four[ 0 ]
initial
begin
	R_Last_Four_expected[0] = 1'bX;
end 
// expected R_FIrst_Four[ 6 ]
initial
begin
	R_FIrst_Four_expected[6] = 1'bX;
end 
// expected R_FIrst_Four[ 5 ]
initial
begin
	R_FIrst_Four_expected[5] = 1'bX;
end 
// expected R_FIrst_Four[ 4 ]
initial
begin
	R_FIrst_Four_expected[4] = 1'bX;
end 
// expected R_FIrst_Four[ 3 ]
initial
begin
	R_FIrst_Four_expected[3] = 1'bX;
end 
// expected R_FIrst_Four[ 2 ]
initial
begin
	R_FIrst_Four_expected[2] = 1'bX;
end 
// expected R_FIrst_Four[ 1 ]
initial
begin
	R_FIrst_Four_expected[1] = 1'bX;
end 
// expected R_FIrst_Four[ 0 ]
initial
begin
	R_FIrst_Four_expected[0] = 1'bX;
end 
// expected SIgn[ 6 ]
initial
begin
	SIgn_expected[6] = 1'bX;
end 
// expected SIgn[ 5 ]
initial
begin
	SIgn_expected[5] = 1'bX;
end 
// expected SIgn[ 4 ]
initial
begin
	SIgn_expected[4] = 1'bX;
end 
// expected SIgn[ 3 ]
initial
begin
	SIgn_expected[3] = 1'bX;
end 
// expected SIgn[ 2 ]
initial
begin
	SIgn_expected[2] = 1'bX;
end 
// expected SIgn[ 1 ]
initial
begin
	SIgn_expected[1] = 1'bX;
end 
// expected SIgn[ 0 ]
initial
begin
	SIgn_expected[0] = 1'bX;
end 
// expected Student_ID[ 6 ]
initial
begin
	Student_ID_expected[6] = 1'bX;
end 
// expected Student_ID[ 5 ]
initial
begin
	Student_ID_expected[5] = 1'bX;
end 
// expected Student_ID[ 4 ]
initial
begin
	Student_ID_expected[4] = 1'bX;
end 
// expected Student_ID[ 3 ]
initial
begin
	Student_ID_expected[3] = 1'bX;
end 
// expected Student_ID[ 2 ]
initial
begin
	Student_ID_expected[2] = 1'bX;
end 
// expected Student_ID[ 1 ]
initial
begin
	Student_ID_expected[1] = 1'bX;
end 
// expected Student_ID[ 0 ]
initial
begin
	Student_ID_expected[0] = 1'bX;
end 
// generate trigger
always @(R_FIrst_Four_expected or R_FIrst_Four or R_Last_Four_expected or R_Last_Four or SIgn_expected or SIgn or Student_ID_expected or Student_ID)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected R_FIrst_Four = %b | expected R_Last_Four = %b | expected SIgn = %b | expected Student_ID = %b | ",R_FIrst_Four_expected_prev,R_Last_Four_expected_prev,SIgn_expected_prev,Student_ID_expected_prev);
	$display("| real R_FIrst_Four = %b | real R_Last_Four = %b | real SIgn = %b | real Student_ID = %b | ",R_FIrst_Four_prev,R_Last_Four_prev,SIgn_prev,Student_ID_prev);
`endif
	if (
		( R_FIrst_Four_expected_prev[0] !== 1'bx ) && ( R_FIrst_Four_prev[0] !== R_FIrst_Four_expected_prev[0] )
		&& ((R_FIrst_Four_expected_prev[0] !== last_R_FIrst_Four_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_FIrst_Four[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_FIrst_Four_expected_prev);
		$display ("     Real value = %b", R_FIrst_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_FIrst_Four_exp[0] = R_FIrst_Four_expected_prev[0];
	end
	if (
		( R_FIrst_Four_expected_prev[1] !== 1'bx ) && ( R_FIrst_Four_prev[1] !== R_FIrst_Four_expected_prev[1] )
		&& ((R_FIrst_Four_expected_prev[1] !== last_R_FIrst_Four_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_FIrst_Four[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_FIrst_Four_expected_prev);
		$display ("     Real value = %b", R_FIrst_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_FIrst_Four_exp[1] = R_FIrst_Four_expected_prev[1];
	end
	if (
		( R_FIrst_Four_expected_prev[2] !== 1'bx ) && ( R_FIrst_Four_prev[2] !== R_FIrst_Four_expected_prev[2] )
		&& ((R_FIrst_Four_expected_prev[2] !== last_R_FIrst_Four_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_FIrst_Four[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_FIrst_Four_expected_prev);
		$display ("     Real value = %b", R_FIrst_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_FIrst_Four_exp[2] = R_FIrst_Four_expected_prev[2];
	end
	if (
		( R_FIrst_Four_expected_prev[3] !== 1'bx ) && ( R_FIrst_Four_prev[3] !== R_FIrst_Four_expected_prev[3] )
		&& ((R_FIrst_Four_expected_prev[3] !== last_R_FIrst_Four_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_FIrst_Four[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_FIrst_Four_expected_prev);
		$display ("     Real value = %b", R_FIrst_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_FIrst_Four_exp[3] = R_FIrst_Four_expected_prev[3];
	end
	if (
		( R_FIrst_Four_expected_prev[4] !== 1'bx ) && ( R_FIrst_Four_prev[4] !== R_FIrst_Four_expected_prev[4] )
		&& ((R_FIrst_Four_expected_prev[4] !== last_R_FIrst_Four_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_FIrst_Four[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_FIrst_Four_expected_prev);
		$display ("     Real value = %b", R_FIrst_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_FIrst_Four_exp[4] = R_FIrst_Four_expected_prev[4];
	end
	if (
		( R_FIrst_Four_expected_prev[5] !== 1'bx ) && ( R_FIrst_Four_prev[5] !== R_FIrst_Four_expected_prev[5] )
		&& ((R_FIrst_Four_expected_prev[5] !== last_R_FIrst_Four_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_FIrst_Four[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_FIrst_Four_expected_prev);
		$display ("     Real value = %b", R_FIrst_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_FIrst_Four_exp[5] = R_FIrst_Four_expected_prev[5];
	end
	if (
		( R_FIrst_Four_expected_prev[6] !== 1'bx ) && ( R_FIrst_Four_prev[6] !== R_FIrst_Four_expected_prev[6] )
		&& ((R_FIrst_Four_expected_prev[6] !== last_R_FIrst_Four_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_FIrst_Four[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_FIrst_Four_expected_prev);
		$display ("     Real value = %b", R_FIrst_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_FIrst_Four_exp[6] = R_FIrst_Four_expected_prev[6];
	end
	if (
		( R_Last_Four_expected_prev[0] !== 1'bx ) && ( R_Last_Four_prev[0] !== R_Last_Four_expected_prev[0] )
		&& ((R_Last_Four_expected_prev[0] !== last_R_Last_Four_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_expected_prev);
		$display ("     Real value = %b", R_Last_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_Last_Four_exp[0] = R_Last_Four_expected_prev[0];
	end
	if (
		( R_Last_Four_expected_prev[1] !== 1'bx ) && ( R_Last_Four_prev[1] !== R_Last_Four_expected_prev[1] )
		&& ((R_Last_Four_expected_prev[1] !== last_R_Last_Four_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_expected_prev);
		$display ("     Real value = %b", R_Last_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_Last_Four_exp[1] = R_Last_Four_expected_prev[1];
	end
	if (
		( R_Last_Four_expected_prev[2] !== 1'bx ) && ( R_Last_Four_prev[2] !== R_Last_Four_expected_prev[2] )
		&& ((R_Last_Four_expected_prev[2] !== last_R_Last_Four_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_expected_prev);
		$display ("     Real value = %b", R_Last_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_Last_Four_exp[2] = R_Last_Four_expected_prev[2];
	end
	if (
		( R_Last_Four_expected_prev[3] !== 1'bx ) && ( R_Last_Four_prev[3] !== R_Last_Four_expected_prev[3] )
		&& ((R_Last_Four_expected_prev[3] !== last_R_Last_Four_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_expected_prev);
		$display ("     Real value = %b", R_Last_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_Last_Four_exp[3] = R_Last_Four_expected_prev[3];
	end
	if (
		( R_Last_Four_expected_prev[4] !== 1'bx ) && ( R_Last_Four_prev[4] !== R_Last_Four_expected_prev[4] )
		&& ((R_Last_Four_expected_prev[4] !== last_R_Last_Four_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_expected_prev);
		$display ("     Real value = %b", R_Last_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_Last_Four_exp[4] = R_Last_Four_expected_prev[4];
	end
	if (
		( R_Last_Four_expected_prev[5] !== 1'bx ) && ( R_Last_Four_prev[5] !== R_Last_Four_expected_prev[5] )
		&& ((R_Last_Four_expected_prev[5] !== last_R_Last_Four_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_expected_prev);
		$display ("     Real value = %b", R_Last_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_Last_Four_exp[5] = R_Last_Four_expected_prev[5];
	end
	if (
		( R_Last_Four_expected_prev[6] !== 1'bx ) && ( R_Last_Four_prev[6] !== R_Last_Four_expected_prev[6] )
		&& ((R_Last_Four_expected_prev[6] !== last_R_Last_Four_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_expected_prev);
		$display ("     Real value = %b", R_Last_Four_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_Last_Four_exp[6] = R_Last_Four_expected_prev[6];
	end
	if (
		( SIgn_expected_prev[0] !== 1'bx ) && ( SIgn_prev[0] !== SIgn_expected_prev[0] )
		&& ((SIgn_expected_prev[0] !== last_SIgn_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIgn[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIgn_expected_prev);
		$display ("     Real value = %b", SIgn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SIgn_exp[0] = SIgn_expected_prev[0];
	end
	if (
		( SIgn_expected_prev[1] !== 1'bx ) && ( SIgn_prev[1] !== SIgn_expected_prev[1] )
		&& ((SIgn_expected_prev[1] !== last_SIgn_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIgn[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIgn_expected_prev);
		$display ("     Real value = %b", SIgn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SIgn_exp[1] = SIgn_expected_prev[1];
	end
	if (
		( SIgn_expected_prev[2] !== 1'bx ) && ( SIgn_prev[2] !== SIgn_expected_prev[2] )
		&& ((SIgn_expected_prev[2] !== last_SIgn_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIgn[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIgn_expected_prev);
		$display ("     Real value = %b", SIgn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SIgn_exp[2] = SIgn_expected_prev[2];
	end
	if (
		( SIgn_expected_prev[3] !== 1'bx ) && ( SIgn_prev[3] !== SIgn_expected_prev[3] )
		&& ((SIgn_expected_prev[3] !== last_SIgn_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIgn[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIgn_expected_prev);
		$display ("     Real value = %b", SIgn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SIgn_exp[3] = SIgn_expected_prev[3];
	end
	if (
		( SIgn_expected_prev[4] !== 1'bx ) && ( SIgn_prev[4] !== SIgn_expected_prev[4] )
		&& ((SIgn_expected_prev[4] !== last_SIgn_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIgn[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIgn_expected_prev);
		$display ("     Real value = %b", SIgn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SIgn_exp[4] = SIgn_expected_prev[4];
	end
	if (
		( SIgn_expected_prev[5] !== 1'bx ) && ( SIgn_prev[5] !== SIgn_expected_prev[5] )
		&& ((SIgn_expected_prev[5] !== last_SIgn_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIgn[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIgn_expected_prev);
		$display ("     Real value = %b", SIgn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SIgn_exp[5] = SIgn_expected_prev[5];
	end
	if (
		( SIgn_expected_prev[6] !== 1'bx ) && ( SIgn_prev[6] !== SIgn_expected_prev[6] )
		&& ((SIgn_expected_prev[6] !== last_SIgn_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SIgn[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SIgn_expected_prev);
		$display ("     Real value = %b", SIgn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SIgn_exp[6] = SIgn_expected_prev[6];
	end
	if (
		( Student_ID_expected_prev[0] !== 1'bx ) && ( Student_ID_prev[0] !== Student_ID_expected_prev[0] )
		&& ((Student_ID_expected_prev[0] !== last_Student_ID_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Student_ID_exp[0] = Student_ID_expected_prev[0];
	end
	if (
		( Student_ID_expected_prev[1] !== 1'bx ) && ( Student_ID_prev[1] !== Student_ID_expected_prev[1] )
		&& ((Student_ID_expected_prev[1] !== last_Student_ID_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Student_ID_exp[1] = Student_ID_expected_prev[1];
	end
	if (
		( Student_ID_expected_prev[2] !== 1'bx ) && ( Student_ID_prev[2] !== Student_ID_expected_prev[2] )
		&& ((Student_ID_expected_prev[2] !== last_Student_ID_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Student_ID_exp[2] = Student_ID_expected_prev[2];
	end
	if (
		( Student_ID_expected_prev[3] !== 1'bx ) && ( Student_ID_prev[3] !== Student_ID_expected_prev[3] )
		&& ((Student_ID_expected_prev[3] !== last_Student_ID_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Student_ID_exp[3] = Student_ID_expected_prev[3];
	end
	if (
		( Student_ID_expected_prev[4] !== 1'bx ) && ( Student_ID_prev[4] !== Student_ID_expected_prev[4] )
		&& ((Student_ID_expected_prev[4] !== last_Student_ID_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Student_ID_exp[4] = Student_ID_expected_prev[4];
	end
	if (
		( Student_ID_expected_prev[5] !== 1'bx ) && ( Student_ID_prev[5] !== Student_ID_expected_prev[5] )
		&& ((Student_ID_expected_prev[5] !== last_Student_ID_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Student_ID_exp[5] = Student_ID_expected_prev[5];
	end
	if (
		( Student_ID_expected_prev[6] !== 1'bx ) && ( Student_ID_prev[6] !== Student_ID_expected_prev[6] )
		&& ((Student_ID_expected_prev[6] !== last_Student_ID_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Student_ID[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Student_ID_expected_prev);
		$display ("     Real value = %b", Student_ID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Student_ID_exp[6] = Student_ID_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Problem1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg Clock;
reg data_in;
reg Enable_decode;
reg FSM_reset;
reg Reset_A;
reg Reset_B;
// wires                                               
wire [0:6] R_FIrst_Four;
wire [0:6] R_Last_Four;
wire [0:6] SIgn;
wire [0:6] Student_ID;

wire sampler;                             

// assign statements (if any)                          
Problem1 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Clock(Clock),
	.data_in(data_in),
	.Enable_decode(Enable_decode),
	.FSM_reset(FSM_reset),
	.R_FIrst_Four(R_FIrst_Four),
	.R_Last_Four(R_Last_Four),
	.Reset_A(Reset_A),
	.Reset_B(Reset_B),
	.SIgn(SIgn),
	.Student_ID(Student_ID)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// Clock
initial
begin
	repeat(12)
	begin
		Clock = 1'b0;
		Clock = #40000 1'b1;
		# 40000;
	end
	Clock = 1'b0;
end 

// data_in
initial
begin
	data_in = 1'b1;
end 

// Enable_decode
initial
begin
	Enable_decode = 1'b1;
end 

// FSM_reset
initial
begin
	FSM_reset = 1'b0;
	FSM_reset = #90000 1'b1;
	FSM_reset = #20000 1'b0;
end 

// Reset_A
initial
begin
	Reset_A = 1'b1;
end 

// Reset_B
initial
begin
	Reset_B = 1'b1;
end 

Problem1_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.Clock(Clock),
	.data_in(data_in),
	.Enable_decode(Enable_decode),
	.FSM_reset(FSM_reset),
	.Reset_A(Reset_A),
	.Reset_B(Reset_B),
	.sampler_tx(sampler)
);

Problem1_vlg_check_tst tb_out(
	.R_FIrst_Four(R_FIrst_Four),
	.R_Last_Four(R_Last_Four),
	.SIgn(SIgn),
	.Student_ID(Student_ID),
	.sampler_rx(sampler)
);
endmodule

